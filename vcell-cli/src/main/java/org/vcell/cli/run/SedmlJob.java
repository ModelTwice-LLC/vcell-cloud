package org.vcell.cli.run;

import cbit.vcell.parser.ExpressionException;
import cbit.vcell.resource.OperatingSystemInfo;
import cbit.vcell.solver.ode.ODESolverResultSet;
import cbit.vcell.xml.ExternalDocInfo;

import org.jlibsedml.*;

import org.apache.commons.io.FilenameUtils;
import org.vcell.cli.CLIRecorder;
import org.vcell.cli.PythonStreamException;
import org.vcell.cli.run.hdf5.Hdf5DatasetWrapper;
import org.vcell.cli.run.hdf5.Hdf5FileWrapper;
import org.vcell.cli.run.hdf5.Hdf5Writer;
import org.vcell.cli.vcml.VCMLHandler;
import org.vcell.util.FileUtils;
import org.vcell.util.GenericExtensionFilter;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

public class SedmlJob {

    private boolean somethingFailed;
    private String sedmlLocation;
    private OmexHandler omexHandler;

    private final static Logger logger = LogManager.getLogger(SedmlJob.class);

    public SedmlJob(String sedmlLocation){
        this.somethingFailed = false;

        this.sedmlLocation = sedmlLocation;
    }


    public void preProcessDoc(){
        logger.info("Initializing SED-ML document...");
        String sedmlName = "", logDocumentMessage = "Initializing SED-ML document... ", logDocumentError = "";
        boolean somethingFailed = false; // shows that the current document suffered a partial or total failure

        File outDirForCurrentSedml = new File(omexHandler.getOutputPathFromSedml(sedmlLocation));

        try {
            SedML sedmlFromOmex, sedmlFromPython;
            String[] sedmlNameSplit;

            
            RunUtils.removeAndMakeDirs(outDirForCurrentSedml);
            sedmlNameSplit = sedmlLocation.split(OperatingSystemInfo.getInstance().isWindows() ? "\\\\" : "/", -2);
            sedmlFromOmex = ExecuteImpl.getSedMLFile(sedmlNameSplit, inputFile);
            sedmlName = sedmlNameSplit[sedmlNameSplit.length - 1];
            logOmexMessage += "Processing " + sedmlName + ". ";
            logger.info("Processing SED-ML: " + sedmlName);
            PythonCalls.updateSedmlDocStatusYml(sedmlLocation, Status.RUNNING, outputDir);

            nModels = sedmlFromOmex.getModels().size();
            for(Model m : sedmlFromOmex.getModels()) {
                List<Change> changes = m.getListOfChanges();	// change attribute caused by a math override
                if(changes != null && changes.size() > 0) {
                    hasOverrides = true;
                }
            }
            for(AbstractTask at : sedmlFromOmex.getTasks()) {
                if(at instanceof RepeatedTask) {
                    RepeatedTask rt = (RepeatedTask)at;
                    List<SetValue> changes = rt.getChanges();
                    if(changes != null && changes.size() > 0) {
                        hasScans = true;
                    }
                }
            }
            nTasks = sedmlFromOmex.getTasks().size();
            outputs = sedmlFromOmex.getOutputs();
            nOutputs = outputs.size();
            for (Output output : outputs) {
                if (output instanceof Report) nReportsCount++;
                if (output instanceof Plot2D) nPlots2DCount++;
                if (output instanceof Plot3D) nPlots3DCount++;
            }
            nSimulations = sedmlFromOmex.getSimulations().size();
            String summarySedmlContentString = "Found " + sedmlLocations.size() + " SED-ML document(s) with "
                    + nModels + " model(s), "
                    + nSimulations + " simulation(s), "
                    + nTasks + " task(s), "
                    + nReportsCount + "  report(s),  "
                    + nPlots2DCount + " plot2D(s), and "
                    + nPlots3DCount + " plot3D(s)\n";
            logger.info(summarySedmlContentString);

            logDocumentMessage += "done. ";
            String str = "Successful translation of SED-ML file";
            logDocumentMessage += str + ". ";
            logger.info(str + " : " + sedmlName);
            RunUtils.drawBreakLine("-", 100);

            // For appending data for SED Plot2D and Plot3d to HDF5 files following a temp convention
            logger.info("Creating pseudo SED-ML for HDF5 conversion...");
            PythonCalls.genSedmlForSed2DAnd3D(inputFilePath, outputDir);
            // SED-ML file generated by python VCell_cli_util
            sedmlPathwith2dand3d = new File(String.valueOf(sedmlPath2d3d), "simulation_" + sedmlName);
            Path path = Paths.get(sedmlPathwith2dand3d.getAbsolutePath());
            if (!Files.exists(path)) {
                String message = "Failed to create file " + sedmlPathwith2dand3d.getAbsolutePath();
                cliRecorder.writeDetailedResultList(bioModelBaseName + "," + sedmlName + "," + message);
                throw new RuntimeException(message);
            }

            // Converting pseudo SED-ML to biomodel
            logger.info("Creating Biomodel from pseudo SED-ML");
            sedmlFromPython = Libsedml.readDocument(sedmlPathwith2dand3d).getSedMLModel();

            /* If SED-ML has only plots as an output, we will use SED-ML that got generated from vcell_cli_util python code
                * As of now, we are going to create a resultant dataSet for Plot output, using their respective data generators */

                // We need the name and path of the sedml file, which sedmlFromPseudo doesnt have!
            sedml = ExecuteImpl.repairSedML(sedmlFromPython, sedmlNameSplit);
            
        } catch (Exception e) {
            String prefix = "SED-ML processing for " + sedmlLocation + " failed with error: ";
            logDocumentError = prefix + e.getMessage();
            String type = e.getClass().getSimpleName();
            PythonCalls.setOutputMessage(sedmlLocation, sedmlName, outputDir, "sedml", logDocumentMessage);
            PythonCalls.setExceptionMessage(sedmlLocation, sedmlName, outputDir, "sedml", type, logDocumentError);
            cliRecorder.writeDetailedErrorList(bioModelBaseName + ",  doc:    " + type + ": " + logDocumentError);
            cliRecorder.writeDetailedResultList(bioModelBaseName + "," + sedmlName + "," + logDocumentError);

            logger.error(prefix, e);
            somethingFailed = somethingDidFail();
            anySedmlDocumentHasFailed = true;
            PythonCalls.updateSedmlDocStatusYml(sedmlLocation, Status.FAILED, outputDir);
            continue; // Next document
        }
    }

    private void myFunc(){
        logger.info("Initializing SED-ML document...");
        String sedmlName = "", logDocumentMessage = "Initializing SED-ML document... ", logDocumentError = "";
        boolean somethingFailed = false; // shows that the current document suffered a partial or total failure

        File outDirForCurrentSedml = new File(omexHandler.getOutputPathFromSedml(sedmlLocation));

        try {
            SedML sedmlFromOmex, sedmlFromPython;
            String[] sedmlNameSplit;

            
            RunUtils.removeAndMakeDirs(outDirForCurrentSedml);
            sedmlNameSplit = sedmlLocation.split(OperatingSystemInfo.getInstance().isWindows() ? "\\\\" : "/", -2);
            sedmlFromOmex = ExecuteImpl.getSedMLFile(sedmlNameSplit, inputFile);
            sedmlName = sedmlNameSplit[sedmlNameSplit.length - 1];
            logOmexMessage += "Processing " + sedmlName + ". ";
            logger.info("Processing SED-ML: " + sedmlName);
            PythonCalls.updateSedmlDocStatusYml(sedmlLocation, Status.RUNNING, outputDir);

            nModels = sedmlFromOmex.getModels().size();
            for(Model m : sedmlFromOmex.getModels()) {
                List<Change> changes = m.getListOfChanges();	// change attribute caused by a math override
                if(changes != null && changes.size() > 0) {
                    hasOverrides = true;
                }
            }
            for(AbstractTask at : sedmlFromOmex.getTasks()) {
                if(at instanceof RepeatedTask) {
                    RepeatedTask rt = (RepeatedTask)at;
                    List<SetValue> changes = rt.getChanges();
                    if(changes != null && changes.size() > 0) {
                        hasScans = true;
                    }
                }
            }
            nTasks = sedmlFromOmex.getTasks().size();
            outputs = sedmlFromOmex.getOutputs();
            nOutputs = outputs.size();
            for (Output output : outputs) {
                if (output instanceof Report) nReportsCount++;
                if (output instanceof Plot2D) nPlots2DCount++;
                if (output instanceof Plot3D) nPlots3DCount++;
            }
            nSimulations = sedmlFromOmex.getSimulations().size();
            String summarySedmlContentString = "Found " + sedmlLocations.size() + " SED-ML document(s) with "
                    + nModels + " model(s), "
                    + nSimulations + " simulation(s), "
                    + nTasks + " task(s), "
                    + nReportsCount + "  report(s),  "
                    + nPlots2DCount + " plot2D(s), and "
                    + nPlots3DCount + " plot3D(s)\n";
            logger.info(summarySedmlContentString);

            logDocumentMessage += "done. ";
            String str = "Successful translation of SED-ML file";
            logDocumentMessage += str + ". ";
            logger.info(str + " : " + sedmlName);
            RunUtils.drawBreakLine("-", 100);

            // For appending data for SED Plot2D and Plot3d to HDF5 files following a temp convention
            logger.info("Creating pseudo SED-ML for HDF5 conversion...");
            PythonCalls.genSedmlForSed2DAnd3D(inputFilePath, outputDir);
            // SED-ML file generated by python VCell_cli_util
            sedmlPathwith2dand3d = new File(String.valueOf(sedmlPath2d3d), "simulation_" + sedmlName);
            Path path = Paths.get(sedmlPathwith2dand3d.getAbsolutePath());
            if (!Files.exists(path)) {
                String message = "Failed to create file " + sedmlPathwith2dand3d.getAbsolutePath();
                cliRecorder.writeDetailedResultList(bioModelBaseName + "," + sedmlName + "," + message);
                throw new RuntimeException(message);
            }

            // Converting pseudo SED-ML to biomodel
            logger.info("Creating Biomodel from pseudo SED-ML");
            sedmlFromPython = Libsedml.readDocument(sedmlPathwith2dand3d).getSedMLModel();

            /* If SED-ML has only plots as an output, we will use SED-ML that got generated from vcell_cli_util python code
                * As of now, we are going to create a resultant dataSet for Plot output, using their respective data generators */

                // We need the name and path of the sedml file, which sedmlFromPseudo doesnt have!
            sedml = ExecuteImpl.repairSedML(sedmlFromPython, sedmlNameSplit);
            
        } catch (Exception e) {
            String prefix = "SED-ML processing for " + sedmlLocation + " failed with error: ";
            logDocumentError = prefix + e.getMessage();
            String type = e.getClass().getSimpleName();
            PythonCalls.setOutputMessage(sedmlLocation, sedmlName, outputDir, "sedml", logDocumentMessage);
            PythonCalls.setExceptionMessage(sedmlLocation, sedmlName, outputDir, "sedml", type, logDocumentError);
            cliRecorder.writeDetailedErrorList(bioModelBaseName + ",  doc:    " + type + ": " + logDocumentError);
            cliRecorder.writeDetailedResultList(bioModelBaseName + "," + sedmlName + "," + logDocumentError);

            logger.error(prefix, e);
            somethingFailed = somethingDidFail();
            anySedmlDocumentHasFailed = true;
            PythonCalls.updateSedmlDocStatusYml(sedmlLocation, Status.FAILED, outputDir);
            continue; // Next document
        }

        /*  temp code to test plot name correctness
        String idNamePlotsMap = utils.generateIdNamePlotsMap(sedml, outDirForCurrentSedml);
        utils.execPlotOutputSedDoc(inputFile, idNamePlotsMap, outputDir);
        */

        /*
            * - Run solvers and make reports; all failures/exceptions are being caught
            * - we send both the whole OMEX file and the extracted SEDML file path
            * - XmlHelper code uses two types of resolvers to handle absolute or relative paths
            */
        SolverHandler solverHandler = new SolverHandler();
        ExternalDocInfo externalDocInfo = new ExternalDocInfo(new File(inputFilePath), true);
        try {
            String str = "Building solvers and starting simulation of all tasks... ";
            logger.info(str);
            logDocumentMessage += str;
            solverHandler.simulateAllTasks(externalDocInfo, sedml, cliRecorder, outDirForCurrentSedml, outputDir,
                    outputBaseDir, sedmlLocation, bKeepTempFiles, bExactMatchOnly, bSmallMeshOverride);
        } catch (Exception e) {
            somethingFailed = somethingDidFail();
            anySedmlDocumentHasFailed = true;
            logDocumentError = e.getMessage();        // probably the hash is empty
            logger.error(e.getMessage(), e);
            // still possible to have some data in the hash, from some task that was successful - that would be partial success
        }

        String message = nModels + ",";
        message += nSimulations + ",";
        message += nTasks + ",";
        message += nOutputs + ",";
        
        message += solverHandler.countBioModels + ",";
        message += hasOverrides + ",";
        message += hasScans + ",";
        message += solverHandler.countSuccessfulSimulationRuns;
        //CLIUtils.writeDetailedResultList(outputBaseDir, bioModelBaseName + "," + sedmlName + ", ," + message, bForceLogFiles);
        cliRecorder.writeDetailedResultList(bioModelBaseName + "," + message);
        logger.debug(message);

        //
        // WARNING!!! Current logic dictates that if any task fails we fail the sedml document
        // change implemented on Nov 11, 2021
        // Previous logic was that if at least one task produces some results we declare the sedml document status as successful
        // that will include spatial simulations for which we don't produce reports or plots!
        //
        try {
            if (solverHandler.nonSpatialResults.containsValue(null) || solverHandler.spatialResults.containsValue(null)) {        // some tasks failed, but not all
                anySedmlDocumentHasFailed = true;
                somethingFailed = somethingDidFail();
                logDocumentMessage += "Failed to execute one or more tasks. ";
                logger.info("Failed to execute one or more tasks in " + sedmlName);
            }

            logDocumentMessage += "Generating outputs... ";
            logger.info("Generating outputs... ");

            if (!solverHandler.nonSpatialResults.isEmpty()) {
                HashMap<String, File> csvReports = null;
                logDocumentMessage += "Generating CSV file... ";
                logger.info("Generating CSV file... ");
                
                csvReports = RunUtils.generateReportsAsCSV(sedml, solverHandler.nonSpatialResults, outDirForCurrentSedml, outputDir, sedmlLocation);
                File[] plotFilesToRename = outDirForCurrentSedml.listFiles(f -> f.getName().startsWith("__plot__"));
                for (File plotFileToRename : plotFilesToRename){
                    String newFilename = plotFileToRename.getName().replace("__plot__","");
                    plotFileToRename.renameTo(new File(plotFileToRename.getParent(),newFilename));
                }
                if (csvReports == null || csvReports.isEmpty() || csvReports.containsValue(null)) {
                    anySedmlDocumentHasFailed = true;
                    somethingFailed = somethingDidFail();
                    String msg = "Failed to generate one or more reports. ";
                    logDocumentMessage += msg;
                } else {
                    logDocumentMessage += "Done. ";
                }
                
                logger.info("Generating Plots... ");
                PythonCalls.genPlotsPseudoSedml(sedmlLocation, outDirForCurrentSedml.toString());    // generate the plots

                // remove CSV files associated with reports, these values are in report.h5 file anyway
//              for (File file : csvReports.values()){
//                  file.delete();
//              }
                logDocumentMessage += "Generating HDF5 file... ";
                logger.info("Generating HDF5 file... ");

                Hdf5FileWrapper hdf5FileWrapper = new Hdf5FileWrapper();
                hdf5FileWrapper.combineArchiveLocation = outDirForCurrentSedml.getName();
                hdf5FileWrapper.uri = outDirForCurrentSedml.getName();

                List<Hdf5DatasetWrapper> nonspatialDatasets = RunUtils.prepareNonspatialHdf5(sedml, solverHandler.nonSpatialResults, solverHandler.taskToSimulationMap, sedmlLocation);
                List<Hdf5DatasetWrapper> spatialDatasets = RunUtils.prepareSpatialHdf5(sedml, solverHandler.spatialResults, solverHandler.taskToSimulationMap, sedmlLocation);
                hdf5FileWrapper.datasetWrappers.addAll(nonspatialDatasets);
                hdf5FileWrapper.datasetWrappers.addAll(spatialDatasets);

                Hdf5Writer.writeHdf5(hdf5FileWrapper, outDirForCurrentSedml);

                for (File tempH5File : solverHandler.spatialResults.values()){
                    if (tempH5File!=null) Files.delete(tempH5File.toPath());
                }

                if (!containsExtension(outDirForCurrentSedml.getAbsolutePath(), "h5")) {
                    anySedmlDocumentHasFailed = true;
                    somethingFailed = somethingDidFail();
                    throw new RuntimeException("Failed to generate the HDF5 output file. ");
                } else {
                    logDocumentMessage += "Done. ";
                }
            }
            
            if (!solverHandler.spatialResults.isEmpty()) {
                // TODO
                // check for failures
                // generate reports from hdf5 outputs and add to non-spatial reports, if any
            }


            anySedmlDocumentHasSucceeded = true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            somethingFailed = somethingDidFail();
            anySedmlDocumentHasFailed = true;
            logDocumentError += e.getMessage();
            String type = e.getClass().getSimpleName();
            PythonCalls.setOutputMessage(sedmlLocation, sedmlName, outputDir, "sedml", logDocumentMessage);
            PythonCalls.setExceptionMessage(sedmlLocation, sedmlName, outputDir, "sedml", type, logDocumentError);
            //CLIUtils.writeDetailedErrorList(outputBaseDir, bioModelBaseName + ",  doc:    " + type + ": " + logDocumentError, bForceLogFiles);
            cliRecorder.writeDetailedErrorList(bioModelBaseName + ",  doc:    " + type + ": " + logDocumentError);
            PythonCalls.updateSedmlDocStatusYml(sedmlLocation, Status.FAILED, outputDir);
            org.apache.commons.io.FileUtils.deleteDirectory(new File(String.valueOf(sedmlPath2d3d)));    // removing temp path generated from python
            continue;
        }

        if (somethingFailed) {        // something went wrong but no exception was fired
            Exception e = new RuntimeException("Failure executing the sed document. ");
            logDocumentError += e.getMessage();
            logger.error(e.getMessage(), e);
            String type = e.getClass().getSimpleName();
            PythonCalls.setOutputMessage(sedmlLocation, sedmlName, outputDir, "sedml", logDocumentMessage);
            PythonCalls.setExceptionMessage(sedmlLocation, sedmlName, outputDir, "sedml", type, logDocumentError);
            //CLIUtils.writeDetailedErrorList(outputBaseDir, bioModelBaseName + ",  doc:    " + type + ": " + logDocumentError, bForceLogFiles);
            cliRecorder.writeDetailedErrorList(bioModelBaseName + ",  doc:    " + type + ": " + logDocumentError);
            PythonCalls.updateSedmlDocStatusYml(sedmlLocation, Status.FAILED, outputDir);
            org.apache.commons.io.FileUtils.deleteDirectory(new File(String.valueOf(sedmlPath2d3d)));    // removing temp path generated from python
            continue;
        }
        Files.move(new File(outDirForCurrentSedml,"reports.h5").toPath(),Paths.get(outputDir,"reports.h5"));
        org.apache.commons.io.FileUtils.deleteDirectory(new File(String.valueOf(sedmlPath2d3d)));    // removing temp path generated from python

        // archiving res files
        logger.info("Archiving result files");
        RunUtils.zipResFiles(new File(outputDir));
        org.apache.commons.io.FileUtils.deleteDirectory(new File(String.valueOf(outDirForCurrentSedml)));    // removing sedml dir which stages results.
        PythonCalls.setOutputMessage(sedmlLocation, sedmlName, outputDir, "sedml", logDocumentMessage);
        PythonCalls.updateSedmlDocStatusYml(sedmlLocation, Status.SUCCEEDED, outputDir);
        logger.info("SED-ML : " + sedmlName + " successfully completed");
    }
}
